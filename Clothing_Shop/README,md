# ðŸ›’ Clothing Shop - IPC System with Shared Memory

This project simulates a **multi-process clothing shop system** in C using **POSIX shared memory (shmget, shmat)** and **semaphores (sem_open, sem_wait, sem_post)** to ensure synchronized access to inventory.

## **ðŸ“Œ Overview**
The system consists of **three processes**:
1. **Shop (`shop.c`)** - Displays the inventory continuously (auto-refresh every 3 seconds).
2. **Customer (`customer.c`)** - Allows customers to place orders, updating the inventory.
3. **Manager (`manager.c`)** - Allows inventory managers to update stock and prices.

âœ… **Real-time updates** across all processes (Customer, Manager, and Shop).  
âœ… **Shared memory ensures immediate reflection** of inventory changes.  
âœ… **Semaphores prevent race conditions** and synchronize access.  

---

## **ðŸ“‚ Project Structure**
ClothingShop/ â”‚â”€â”€ store.h # Shared memory & semaphore definitions â”‚â”€â”€ shop.c # Shop process (Displays inventory) â”‚â”€â”€ customer.c # Customer process (Places orders & refreshes) â”‚â”€â”€ manager.c # Manager process (Updates stock & refreshes) â”‚â”€â”€ inventory.txt # Initial stock (only read at startup) â”‚â”€â”€ transactions.log # Logs transactions â”‚â”€â”€ Makefile # Automates compilation
---

## **ðŸš€ How It Works**
- **The `shop` process runs continuously**, refreshing inventory every 3 seconds.
- **Customers place orders (`customer.c`)**, and the inventory updates immediately.
- **Managers update stock (`manager.c`)**, and the changes appear in real-time.
- **All processes use shared memory**, meaning **changes reflect across all processes immediately**.


